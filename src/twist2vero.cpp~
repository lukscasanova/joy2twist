#include <ros/ros.h>
#include <verocarfreedomdefs_msgs/CarCommand.h>
#include <geometry_msgs/Twist.h>


class Joy2Vero
{
public:
  Joy2Vero();

private:
  void joyCallback(const sensor_msgs::Joy::ConstPtr& joy);
  
  ros::NodeHandle nh_;

  int linear_, angular_;
  double l_scale_, a_scale_;
  ros::Publisher command_pub_;
  ros::Subscriber joy_sub_;
  
};


Joy2Vero::Joy2Vero():
  linear_(1),
  angular_(2)
{

  nh_.param("axis_linear", linear_, linear_);
  nh_.param("axis_angular", angular_, angular_);
  nh_.param("scale_angular", a_scale_, a_scale_);
  nh_.param("scale_linear", l_scale_, l_scale_);


  // Alterar para publicar mensagens do tipo CarCommand
//vel_pub_ = nh_.advertise<turtlesim::Velocity>("turtle1/command_velocity", 1);
 command_pub_ = n.advertise<verocarfreedomdefs_msgs::CarCommand>("car_command", 1);


  joy_sub_ = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &TeleopTurtle::joyCallback, this);

}

void TeleopTurtle::joyCallback(const sensor_msgs::Joy::ConstPtr& joy)
{
// Declara mensagens do tipo CarCommand e preencher com os ados do leitor

  verocarfreedomdefs_msgs::CarCommand command
  turtlesim::Velocity vel;

//TODO implementar calculo usado em verocarfreedom_controle
  command.steerAngle = a_scale_*joy->axes[angular_];
  command.speedLeft = command.speedRight= l_scale_*joy->axes[linear_];
  command_pub_.publish(command);
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "teleop_turtle");
  TeleopTurtle teleop_turtle;

  ros::spin();
}
